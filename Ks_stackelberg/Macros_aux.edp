
///////////////////Para plotear la solution en el tiempo/////////////////////////////////
macro FillspaceElement(SpacetimeElement,elementarra)
{
for(int j=0 ; j < maxiteration ; j++ )
	for (int i=j*(n1+1),k=0;i<(j+1)*(n1+1);i++){
		real xvaraux = ThSpacetime(i).x;
		SpacetimeElement[][i]  = elementarra[j][][k];
		k++;
	}
}


//macro para calcular el gradiente
macro gradientes(gradvs,gradpsis,vs,psis,phi1sols)
gradpsis = -gamma*gamma*psis-phi1sols;
gradvs = l*l*vs-phi1sols;
; //EOM
macro gradienteV(gradvs,vs,phi1sols)
gradvs = l*l*vs-phi1sols;
; //EOM

macro gradientePSI(gradpsis,psis,phi1sols)
gradpsis = -gamma*gamma*psis-phi1sols;
; //EOM

//macro para ver la norm de la condicion de optimalidad
macro caloptimalidad(gradvk,gradpsik,optimalidad)
optimalidad = 0.;
optimalidad = optimalidad + int2d(ThSpacetime,10)(gradvk^2);
optimalidad = optimalidad + int2d(ThSpacetime)(gradpsik^2);
; //EOM


//macro para el paso de descenso
macro descenso(vk,gradvk,pasovk)
vk = vk - pasovk*gradvk;
//EOM

//macro para el paso de acenso
macro acenso(psik,gradpsik,pasopsik)
psik = psik + pasopsik*gradpsik;
 //EOM


//macro para el paso de acenso
macro actualiza(w,grad,pasoact)
w = grad + pasoact*w;
 //EOM

//macro para realizar el producto interno
macro innerproduct(Malla,elemento1,elemento2,valor)
valor = valor + int2d(Malla)(elemento1*elemento2);
 //EOM



//int2d(ThSpacetime,10)(vs^2.0); integrtando en la region del subdomino
//macro evaluar el funcional
macro J(usols,vs,psis,error) 
error = 0.0;
error = error + (1.0/2.0)*mu*int2d(ThSpacetime)((usols-uobj)^2.0);
error = error + (1.0/2.0)*l*l*int2d(ThSpacetime,10)(vs^2.0);
error = error - (1.0/2.0)*gamma*gamma*int2d(ThSpacetime)(psis^2.0);
//EOM


