/* Authors: Louis Breton <louis.breton@ciencias.unam.mx>,
 * Authors: Cristhian Montoya <cdmontoy@mat.uc.cl>,
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hopeC that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <https://www.gnu.org/licenses/>.
 *
 */

/*codigo para resolver la solution exacta de ks
 * u_t + u_xxxx + u_xx + u*u_x = f
 * u = u_x = 0 en la frontera
 * u(.,0) = yini
 * uxx(.,0) = yinixx
 * */
verbosity= 0; //para minizar el texto de la pantalla
include "macros.edp" 
include "Condiciones_sol.edp"
include "getARGV.idp"

/////////////////////PARAMETROS DE LA MALLA////////////////////////////////////
int n1 = getARGV("-meshN",200.0); //calidad de la malla del dominio sin los hoyos
real Lmin = getARGV("-Lmin",-30.0);
real Lmax = getARGV("-Lmax",30.0);

//////////////////////////PARAMETROS de la ecuacion//////////////////
real Tfinal = getARGV("-Tfinal",1.0); // tiempo final
real dt= getARGV("-dt",1./100000.); // paso del tiempo para el euler hacia adelante
real alpha=1./dt; // variable auxilar para el inverso del paso del tiempo
int maxiteration = Tfinal*alpha; // numero de iteraciones totales
real meshheight = 1.0/n1;
//condiciones inciales

///////////////////Para plotear la solution en el tiempo/////////////////////////////////
mesh Th = square(n1, 1, [Lmin+(Lmax-Lmin)*x, meshheight*y]);

//Transforma un arreglo cortes en el tiempo de ks
// a un elemento de el espacio-tiempo


/////////ELEMENTOS //////////////////////
//Definiendo los elementos
fespace FeOmega(Th,P1,periodic=[[1,x],[3,x]]); //Espacio de elementos para ks
FeOmega yy,ytest,ylap,ylaptest; //elementos para ks
FeOmega yold,ylapold,yoldold; //elementos para ks
FeOmega Source;
FeOmega[int] yya(maxiteration); //arreglo para guardar los estados del primal en el tiempo

////////////////////////////////////////////////////////////////////


real theta = 1./4.;
////////////FORMA VARIACIONAL del primal///////////////////////
problem  Primal([yy,ylap],[ytest,ylaptest],init=1) =
  
  //Time derivative part
     int2d(Th)(alpha*yy*ytest)
    + int2d(Th)( -alpha*ytest*yold)    
    
 //linear theta operator 
    + int2d(Th)((1-theta)*(
            - dx(ylap)*dx(ytest)
            - dx(yy)*dx(ytest)
            ))
    + int2d(Th)(theta*(
            - dx(ylapold)*dx(ytest)
            - dx(yold)*dx(ytest)
            ))
  //Non-linear-BAdams
   + int2d(Th)((3./2.)*yold*dx(yold)*(ytest)) 
   - int2d(Th)((1./2.)*yoldold*dx(yoldold)*(ytest)) 
    
   //Bilap Part           
   + int2d(Th)(
            dx(yy)*dx(ylaptest)     
            )
   +int2d(Th)( ylap*ylaptest)
  
  //source part
  -int2d(Th)( Source*ytest)

           
  + on(2,4,yy=0.0)  // Condiciones de frontera
;

macro Solprimal(yinicial,lapyinicial) 
yold = yini;
yoldold = yold;
ylapold = lapyinicial;

Source = ksource(x,dt);
Primal;
yya[0] = yy;  	 
yold = yy;
ylapold = ylap;

for (int i=1;i<maxiteration;i++) {
cout << i << endl;
Source = ksource(x,(i+1)*dt);	
Primal;
yya[i] = yy;
yoldold = yold;  	 
yold = yy;
ylapold = ylap;

};  //EOM

//Resolviendo ks con yini, yinixx
Solprimal(yini,yinixx);

real normainfinito=0;
real normaL2 = 0;

FeOmega Diff; // |y_aprox[i] - yexacta[i]|
for(int i=0; i < maxiteration; i++){
	Diff = abs(yya[0] - ksol(x,(i+1)*dt));
	normainfinito = max(Diff[].max,normainfinito);
	normaL2 = normaL2 + dt*int2d(Th)(Diff^2.0);
	}

cout << normainfinito << " " << normaL2 << endl;


